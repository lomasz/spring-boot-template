plugins {
    id "org.springframework.boot" version "2.7.3"
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id "java"
    id "jacoco"
    id 'com.diffplug.spotless' version '6.22.0'
}

ext {
    jacocoVersion = "0.8.8"
    junitVersion = '5.9.0'
    lombokVersion = '1.18.24'
    mapStructVersion = '1.5.2.Final'
    mockitoVersion = '4.8.0'
    swaggerVersion = '1.6.11'
}

group = "com.lomasz.spring.boot.template"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local/" }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation "org.mapstruct:mapstruct:$mapStructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"

    implementation "org.springdoc:springdoc-openapi-ui:$swaggerVersion"

    implementation "org.springframework.boot:spring-boot-starter-actuator"

    runtimeOnly 'com.h2database:h2:2.1.214'

    testImplementation "org.springframework.boot:spring-boot-starter-test"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

processResources {
    expand(project.properties)
}

clean {
    delete "out"
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        eclipse()
        indentWithSpaces(4)
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            "**/*Application*",
                            "**/config/**/*",
                            "**/exception/**/*",
                            "**/model/**/*",
                            "**/mapper/**/*",
                            "**/repository/**/*"
                    ]
            )
        }))
    }
}

test.finalizedBy jacocoTestReport

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}
