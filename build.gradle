plugins {
    id "java"
    id "org.springframework.boot" version "3.3.3"
    id "io.spring.dependency-management" version "1.1.6"
    id "jacoco"
    id "org.owasp.dependencycheck" version "8.4.3"
    id "com.diffplug.spotless" version "6.25.0"
}

ext {
    archUnitVersion = "1.3.0"
    jacocoVersion = "0.8.12"
    liquibaseVersion = "4.29.1"
    lombokVersion = "1.18.34"
    mockitoVersion = "5.12.0"
    swaggerVersion = "2.6.0"
    h2Version = "2.3.232"
}

group = "com.github.lomasz.spring.boot.template"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_22
}

repositories {
    mavenCentral()
    maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local/" }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$swaggerVersion"

    implementation "org.liquibase:liquibase-core:$liquibaseVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    runtimeOnly "com.h2database:h2:$h2Version"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-starter-webflux"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "com.tngtech.archunit:archunit-junit5:$archUnitVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

processResources {
    expand(project.properties)
}

clean {
    delete "out"
}

dependencyCheck {
    failBuildOnCVSS = 7
    format = "HTML"
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        //palantirJavaFormat()
        indentWithSpaces(4)
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    executionData(fileTree(layout.buildDirectory.get().asFile).include("jacoco/*.exec"))
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["**/*Application*",
                              "**/config/**/*",
                              "**/exception/**/*",
                              "**/model/**/*"])
        }))
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    finalizedBy tasks.jacocoTestReport

    testLogging {
        events "passed", "skipped", "failed"
    }
}
